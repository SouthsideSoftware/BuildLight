<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets ="Dist" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Tools -->
  <PropertyGroup>
    <ToolsDir>$(MSBuildProjectDirectory)\tools</ToolsDir>
    <PackageDir>$(MSBuildProjectDirectory)\packages</PackageDir>
    <MSBuildCommunityTasksPath>$(ToolsDir)\MSBuild\MSBuildCommunityTasks</MSBuildCommunityTasksPath>
    <SouthSideTasksPath>$(ToolsDir)\MSBuild\SouthSideBuildTasks</SouthSideTasksPath>
    <NuGet>$(ToolsDir)\msbuild\nuget.exe</NuGet>
  </PropertyGroup>

  <!-- Artifact Directories -->
  <PropertyGroup>
    <OutputDir>$(MSBuildProjectDirectory)\BuildOutput</OutputDir>
    <BinDir>$(OutputDir)\bin</BinDir>
    <DistributionDir>$(OutputDir)\distribution</DistributionDir>
    <HelpDir>$(OutputDir)\Help</HelpDir>
    <TestOutputDir>$(OutputDir)\TestResults</TestOutputDir>
    <NuGetPackageDir>$(OutputDir)\NuGet</NuGetPackageDir>
	<WebDir>$(OutputDir)\Web</WebDir>
  </PropertyGroup>

  <!-- Help -->
  <PropertyGroup>
    <HelpProject>$(MSBuildProjectDirectory)\$(ProductName).shfbproj</HelpProject>
    <HelpTitle>$(ProductDescription)</HelpTitle>
    <PublicWebHelpDir>D:\ApiDocumentation\$(ProductName)</PublicWebHelpDir>
  </PropertyGroup>

  <!-- Misc -->
  <PropertyGroup>
    <ZipQualifier>_$(AppVersion).$(BuildNumber)_$(Configuration)$(AdditionalZipQualifier).zip</ZipQualifier>
  </PropertyGroup>
 
  <ItemGroup>
    <ProjectToBuild Include="$(MSBuildProjectDirectory)\$(ProductName).sln"></ProjectToBuild>
  </ItemGroup>

  <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets"/>
  <Import Project="$(SouthSideTasksPath)\SouthSideBuildTasks.MSBuild.Tasks.Targets"/>
  
  <UsingTask TaskName="NUnit" AssemblyFile="$(teamcity_dotnet_nunitlauncher_msbuild_task)" Condition="$(InTeamCity)"/>
 
  <Target Name="Dist" DependsOnTargets="CheckObsolete;Clean;TransformConfigs;Version;Build;Test;Document;Publish"/>
  <Target Name="TeamCityBuild" DependsOnTargets="CheckObsolete;Clean;TransformConfigs;Version;Build;Test"/>
  <Target Name="TeamCityPublish" DependsOnTargets="Document;Publish"/>
  
  <Target Name="CheckObsolete">
	<Error Text="Use CreateNugetPackagesDependsOn instead of CustomPublishTask to extend the Publish task" Condition="$(CustomPublishTask) != ''"/>
	<Error Text="Use PublishWebDependsOn instead of CopyAdditionalWebFilesTarget to extend the PublishWeb task" Condition="$(CopyAdditionalWebFilesTarget) != ''"/>
  </Target>
	
  <Target Name="Clean" DependsOnTargets="$(CleanDependsOn)">
    <Message Importance="high" Text="Clean"/>
    <Message Importance="high" Text="======================================================="/>
    <Message Importance="high" Text="Configuration = $(Configuration)"/>
    <Message Importance="high" Text="Version = $(AppVersion).$(BuildNumber)"/>
    <Message Importance="high" Text="DB = $(SchemaVersion)"/>
    <Message Importance="high" Text="MSBuild Path: $(MSBuildBinPath)"/>
    <Message Importance="high" Text="-------------------------------------------------------"/>
    <Message Importance="high" Text="Uses Help" Condition = "Exists('$(HelpProject)')"/>
    <Message Importance="high" Text="Uses Nuget" Condition = "@(NugetItem) != ''"/>
    <Message Importance="high" Text="GenerateDocs = $(GenerateDocs)"/>
    <Message Importance="high" Text="PublishWebHelp = $(PublishWebHelp)"/>
    <Message Importance="high" Text="PublicWebHelpDir = $(PublicWebHelpDir)"/>
    <Message Importance="high" Text="PublishNugetPackages = $(PublishNugetPackages)"/>
	<Message Importance="high" Text="Publish Web = $(WebProjectDir)" Condition = "$(WebProjectDir) != ''"/>
    <Message Importance="high" Text="======================================================="/>
    <RemoveDir Directories="$(OutputDir)" ContinueOnError="true"/>
    <MakeDir Directories="$(OutputDir)"/>
    <MakeDir Directories="$(BinDir)"/>
    <MakeDir Directories="$(DistributionDir)"/>
    <MakeDir Directories="$(HelpDir)"/>
    <MakeDir Directories="$(TestOutputDir)"/>
    <MakeDir Directories="$(NuGetPackageDir)" Condition="@(NugetItem) != ''"/>
	<MakeDir Directories="$(WebDir)" Condition="$(WebProjectDir) != ''"/>
  </Target>
  
  <Target Name="TransformConfigs" Condition="@(ConfigItem) != ''" Outputs="%(ConfigItem.Identity)">
    <Message Importance="high" Text="TransformConfigs"/>
	<Message Importance="high" Text="Transforming %(ConfigItem.ConfigFile) using %(ConfigItem.ConfigXslt)"/>
	<Message Importance="high" Text="======================================================="/>
    <XslTransformation XmlInputPaths="%(ConfigItem.ConfigFile)" XslInputPath="%(ConfigItem.ConfigXslt)" OutputPaths="temp.config_output" />
    <Copy SourceFiles="temp.config_output" DestinationFiles="%(ConfigItem.ConfigFile)" />
  </Target>

  <Target Name="InstallPackages" DependsOnTargets="CreateNugetCredentials">
    <Message Importance="high" Text="Installing packages for solution"/>
    <XmlQuery XmlFileName="$(PackageDir)\repositories.config" XPath="//repositories/*">
      <Output TaskParameter="Values" ItemName="Values"/>
    </XmlQuery>
    <ItemGroup>
      <ProjectWithPackages Include="%(Values.path)"/>
    </ItemGroup>
    <Exec WorkingDirectory="$(PackageDir)" 
          Command="cmd /c $(NuGet) install %(ProjectWithPackages.Identity) -s $(PublicNugetUrl) &lt; $(OutputDir)\credentials.txt"/>
  </Target>
  
  <Target Name="Version">
    <Message Importance="high" Text="Version"/>
    <Time>
      <Output TaskParameter="Year" PropertyName="Year"/>
    </Time>
    <AssemblyInfo OutputFile="$(MSBuildProjectDirectory)\CommonAssemblyInfo.cs" CodeLanguage="C#"
            ComVisible="false" AssemblyCulture=""
            AssemblyVersion="$(AppVersion)"
            AssemblyFileVersion="$(AppVersion).$(BuildNumber)"
            AssemblyCopyright="Copyright (C) $(CompanyName) $(Year)"
            AssemblyConfiguration="$(Configuration)"
            AssemblyCompany="$(CompanyName)"
            AssemblyProduct="$(ProductDescription) ($(Configuration) DB: $(SchemaVersion))"/>

    <CallTarget Targets="VersionHelp"/>
  </Target>

  <Target Name="VersionHelp" Condition="Exists('$(HelpProject)')">
    <Message Importance="high" Text="VersionHelp: $(HelpProject)"/>
    <XmlUpdate XmlFileName="$(HelpProject)"
               Namespace="http://schemas.microsoft.com/developer/msbuild/2003"
               Prefix="n"
               XPath="//n:HelpTitle"
               Value="$(HelpTitle) $(AppVersion).$(BuildNumber)"/>
  </Target>

  <Target Name="Build">
    <Message Importance="high" Text="Build"/>
    <Time>
      <Output TaskParameter="Ticks" PropertyName="StartTick"/>
    </Time>
     <MSBuild Projects="@(ProjectToBuild)"
         Targets="Rebuild"
         Properties="Configuration=$(Configuration);Platform=Any CPU"/>
    <Time>
      <Output TaskParameter="Ticks" PropertyName="EndTick"/>
    </Time>
    <Math.Subtract Numbers="$(EndTick);$(StartTick)">
      <Output TaskParameter="Result" PropertyName="ElapsedTicks" />
    </Math.Subtract>
    <Math.Divide Numbers="$(ElapsedTicks);10000000.0">
      <Output TaskParameter="Result" PropertyName="ElapsedSeconds" />
    </Math.Divide>


    <Message Importance="high" Text="Compile Seconds: $(ElapsedSeconds)"/>
  </Target>

  <Target Name="Test" Condition="@(NUnitTestItem) != ''">
    <Message Importance="high" Text="Test"/>
    <CallTarget Targets="NUnitTests"/>
  </Target>

  <Target Name="NUnitTests" Outputs="%(NUnitTestItem.Identity)" Condition="@(NUnitTestitem) != ''">
    <PropertyGroup>
      <TestProjectDir>$(TestProjectBaseDir)\%(NUnitTestItem.Identity)</TestProjectDir>
      <TestDir>$(TestProjectDir)\bin\$(Configuration)</TestDir>
	  <IsEnvironmentSpecificTest Condition="%(NUnitTestItem.EnvironmentSpecific) == '' or !%(NUnitTestItem.EnvironmentSpecific)">false</IsEnvironmentSpecificTest>
	  <IsEnvironmentSpecificTest Condition="%(NUnitTestItem.EnvironmentSpecific) != '' and %(NUnitTestItem.EnvironmentSpecific)">true</IsEnvironmentSpecificTest>
    </PropertyGroup>
    
    <Message Importance="high" Text="Testing in NUnit: $(TestDir)\%(NUnitTestItem.Identity)" Condition="!$(SkipEnvironmentSpecificTests) or !$(IsEnvironmentSpecificTest)"/>
	<Message Importance="high" Text="ENVIRONMENT SPECIFIC TEST SKIPPED: $(TestDir)\%(NUnitTestItem.Identity)" Condition="$(SkipEnvironmentSpecificTests) and $(IsEnvironmentSpecificTest)"/>
    
	<!--
	Nunit runner is different version from lib in NuGet so we have to hardcode
	
    <XmlRead XPath="//package[@id='NUnit']/@version"
             XmlFileName="$(TestProjectDir)\packages.config"
			 Condition="!$(SkipEnvironmentSpecificTests) or !$(IsEnvironmentSpecificTest)">
      <Output TaskParameter="Value" PropertyName="NUnitVersion"/>
    </XmlRead>
    -->
	
	<PropertyGroup>
	    <NUnitVersion>2.6.0.12051</NUnitVersion>
    </PropertyGroup>
	
    <Message Importance="high" Text="NUnit: $(PackageDir)\NUnit.Runners.$(NUnitVersion)\tools\nunit-console.exe" Condition="!$(SkipEnvironmentSpecificTests) or !$(IsEnvironmentSpecificTest)"/>

	<NUnit ToolPath="$(PackageDir)\NUnit.Runners.$(NUnitVersion)\tools"
		   Condition="!$(SkipEnvironmentSpecificTests) or !$(IsEnvironmentSpecificTest)"
		   Assemblies="$(TestDir)\%(NUnitTestItem.Identity).dll"
		   OutputXmlFile="$(TestOutputDir)\%(NUnitTestItem.Identity).results.nunit.xml"/>
  </Target>

  <Target Name="Document" Condition="$(GenerateDocs)">
    <Message Importance="high" Text="Document"/>
    <MSBuild Projects="$(HelpProject)" Properties="Configuration=$(Configuration);Platform=AnyCPU"/>
    <XmlMassUpdate ContentFile="$(HelpDir)\Web.config"
               NamespaceDefinitions="msb=http://schemas.microsoft.com/developer/msbuild/2003"
               ContentRoot="configuration"
               SubstitutionsFile="$(ToolsDir)\MSBuild\BuildSupport\Onpoint.targets.properties"
               SubstitutionsRoot="/msb:Project/msb:ProjectExtensions/msb:helpWebConfigContent" />
  </Target>

  <Target Name="Publish">
    <Message Importance="high" Text="Publish"/>
    
    <CallTarget Targets="PublishBin"/>
    <CallTarget Targets="PublishHelp"/>
	<CallTarget Targets="PublishWeb"/>
    <CallTarget Targets="$(CustomPublishTask)" Condition="$(CustomPublishTask) != ''"/>
    <CallTarget Targets="CreateNugetPackages"/>
    <CallTarget Targets="PublishNugetPackages"/>
  </Target>

  <Target Name="PublishBin" Condition="$(BinInclude) != ''">
    <Message Importance="high" Text="PublishBin"/>

    <CreateItem Include="$(BinInclude)" Exclude="$(BinExclude)">
      <Output TaskParameter="Include" ItemName="BinFiles"/>
    </CreateItem>
    
    <Copy SourceFiles="@(BinFiles)" DestinationFolder="$(BinDir)"/>

    <ItemGroup>
      <ZipFiles Include="$(BinDir)\**\*.*"/>
    </ItemGroup>
    <PropertyGroup>
      <ZipFileName>$(DistributionDir)\$(ProductName)$(ZipQualifier)</ZipFileName>
    </PropertyGroup>
    <Zip Files="@(ZipFiles)" WorkingDirectory="$(BinDir)" ZipFileName="$(ZipFileName)"/>
  </Target>

  <Target Name="PublishHelp" Condition="$(GenerateDocs) and $(PublishWebHelp)">
    <Message Importance="high" Text="PublishHelp"/>
    <ItemGroup>
      <HelpFiles Include="$(HelpDir)\**\*.*"/>
    </ItemGroup>
    <RemoveDir Directories="$(PublicWebHelpDir)" ContinueOnError="true"/>
    <Copy SourceFiles="@(HelpFiles)" DestinationFolder="$(PublicWebHelpDir)\%(RecursiveDir)"/>
  </Target>
  
  <Target Name="PublishWeb" Condition="$(WebProjectDir) != ''" DependsOnTargets="$(PublishWebDependsOn)">
	<Message Importance="high" Text="PublishWeb"/>
	<ItemGroup>
	  <WebFiles Include="$(WebProjectDir)\**\*.*"
	            Exclude="$(WebProjectDir)\**\*.cs;
				         $(WebProjectDir)\**\*.csproj;
						 $(WebProjectDir)\**\*.csproj.user;
						 $(WebProjectDir)\obj\**\*.*;
						 $(WebProjectDir)\Web.*.config;
						 $(WebProjectDir)\NHibernate.*.config;
						 $(WebProjectDir)\packages.config"/>
	</ItemGroup>
      	
    <Copy SourceFiles="@(WebFiles)" DestinationFolder="$(WebDir)\%(RecursiveDir)"/>
	
	<ItemGroup>
      <ZipWebFiles Include="$(WebDir)\**\*.*"/>
    </ItemGroup>
	
	<PropertyGroup>
      <ZipWebFileName>$(DistributionDir)\$(ProductName)_Web$(ZipQualifier)</ZipWebFileName>
    </PropertyGroup>
    
	<Zip Files="@(ZipWebFiles)" WorkingDirectory="$(WebDir)" ZipFileName="$(ZipWebFileName)"/>	
	
  </Target>
  
  <Target Name="CreateNugetPackages" Condition="@(NugetItem) != ''" DependsOnTargets="$(CreateNugetPackagesDependsOn)">
    <Message Importance="high" Text="CreateNugetPackages"/>
    <CallTarget Targets="CreateNugetPackage"/>
  </Target>

  <Target Name="CreateNugetPackage" Outputs="%(NugetItem.Identity)" Condition="@(NugetItem) != ''">
    <Message Importance="high" Text="CreateNugetPackage"/>
	
	<PropertyGroup>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) != ''">%(NugetItem.OverrideVersion)</PackageVersion>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) == '' AND !$(UseSemanticVersioning)">$(AppVersion).$(BuildNumber)</PackageVersion>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) == '' AND $(UseSemanticVersioning) AND $(SemanticVersion) == ''">$(AppVersion)</PackageVersion>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) == '' AND $(UseSemanticVersioning) AND $(SemanticVersion) != ''">$(AppVersion)-$(SemanticVersion)</PackageVersion>
	</PropertyGroup>
	
	<Message Importance="high" Text="Version for %(NugetItem.Identity) is $(PackageVersion)"/>

    <XmlUpdate XmlFileName="%(NugetItem.Identity).nuspec"
               Namespace="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"
               Prefix="n"
               XPath="//n:summary"
               Value="%(NugetItem.NugetPackageSummary) ($(Configuration))"/>

    <XmlUpdate XmlFileName="%(NugetItem.Identity).nuspec"
               Namespace="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"
               Prefix="n"
               XPath="//n:version"
               Value="$(PackageVersion)"/>

    <Exec WorkingDirectory="$(NuGetPackageDir)" Command="$(NuGet) pack $(MSBuildProjectDirectory)\%(NugetItem.Identity).nuspec"/>
  </Target>

  <Target Name="PublishNugetPackages" Condition="$(PublishNugetPackages)" DependsOnTargets="CreateNugetCredentials">
    <Message Importance="high" Text="PublishNugetPackages"/>
    <CallTarget Targets="PublishNugetPackage"/>
  </Target>
  
  <Target Name="PublishNugetPackage" Outputs="%(NugetItem.Identity)" Condition="$(PublishNugetPackages)">
	<Message Importance="high" Text="Publish package %(NugetItem.NugetPackageId)" Condition="%(NugetItem.NugetPushUrl) != ''"/>
	
	<PropertyGroup>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) != ''">%(NugetItem.OverrideVersion)</PackageVersion>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) == '' AND !$(UseSemanticVersioning)">$(AppVersion).$(BuildNumber)</PackageVersion>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) == '' AND $(UseSemanticVersioning) AND $(SemanticVersion) == ''">$(AppVersion)</PackageVersion>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) == '' AND $(UseSemanticVersioning) AND $(SemanticVersion) != ''">$(AppVersion)-$(SemanticVersion)</PackageVersion>
		<PushUrl Condition="%(NugetItem.NugetPushUrl) == '$(BlindsNugetServer)'">$(BlindsNugetPushUrl)</PushUrl>
		<PushUrl Condition="%(NugetItem.NugetPushUrl) != '$(BlindsNugetServer)'">%(NugetItem.NugetPushUrl)</PushUrl>
	</PropertyGroup>
	
    <Exec WorkingDirectory="$(NuGetPackageDir)" Command="cmd.exe /c $(NuGet) push %(NugetItem.NugetPackageId).$(PackageVersion).nupkg  %(NugetItem.NugetApiKey) -source $(PushUrl) &lt; $(OutputDir)\credentials.txt" 
	  Condition="%(NugetItem.NugetPushUrl) != ''"/>
  </Target>
  
  <Target Name="CreateNugetCredentials">
	<ItemGroup>
	  <FileName Include="$(OutputDir)\credentials.txt"/>
	</ItemGroup>
	<WriteLinesToFile File="@(FileName)" Lines="$(NugetUserName);$(NugetPassword)" Overwrite="true"/>
  </Target>
</Project>
