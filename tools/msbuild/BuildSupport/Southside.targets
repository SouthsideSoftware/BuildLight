<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets ="Dist" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Tools -->
  <PropertyGroup>
    <ToolsDir>$(MSBuildProjectDirectory)\tools</ToolsDir>
    <PackageDir>$(MSBuildProjectDirectory)\packages</PackageDir>
    <MSBuildCommunityTasksPath>$(ToolsDir)\MSBuild\MSBuildCommunityTasks</MSBuildCommunityTasksPath>
    <SouthSideTasksPath>$(ToolsDir)\MSBuild\SouthSideBuildTasks</SouthSideTasksPath>
    <NuGet>$(MSBuildProjectDirectory)\.nuget\nuget.exe</NuGet>
  </PropertyGroup>

  <!-- Artifact Directories -->
  <PropertyGroup>
    <OutputDir>$(MSBuildProjectDirectory)\BuildOutput</OutputDir>
    <BinDir>$(OutputDir)\bin</BinDir>
    <DistributionDir>$(OutputDir)\distribution</DistributionDir>
    <HelpDir>$(OutputDir)\Help</HelpDir>
    <TestOutputDir>$(OutputDir)\TestResults</TestOutputDir>
    <NuGetPackageDir>$(OutputDir)\NuGet</NuGetPackageDir>
	<WebDir>$(OutputDir)\Web</WebDir>
	<TempDir>$(OutputDir)\Temp</TempDir>
  </PropertyGroup>

  <!-- Help -->
  <PropertyGroup>
    <HelpProject>$(MSBuildProjectDirectory)\$(ProductName).shfbproj</HelpProject>
    <HelpTitle>$(ProductDescription)</HelpTitle>
    <PublicWebHelpDir>D:\ApiDocumentation\$(ProductName)</PublicWebHelpDir>
  </PropertyGroup>

  <!-- Misc -->
  <PropertyGroup>
    <ZipQualifier>_$(AppVersion).$(BuildNumber)_$(Configuration)$(AdditionalZipQualifier).zip</ZipQualifier>
  </PropertyGroup>
 
  <ItemGroup>
    <ProjectToBuild Include="$(MSBuildProjectDirectory)\$(ProductName).sln"></ProjectToBuild>
  </ItemGroup>

  <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets"/>
  <Import Project="$(SouthSideTasksPath)\SouthSideBuildTasks.MSBuild.Tasks.Targets"/>
  
  <UsingTask TaskName="NUnit" AssemblyFile="$(teamcity_dotnet_nunitlauncher_msbuild_task)" Condition="$(InTeamCity)"/>
 
  <Target Name="Dist" DependsOnTargets="CheckObsolete;Clean;TransformConfigs;Version;InstallSolutionLevelPackages;Build;Test;Document;Publish"/>
  <Target Name="TeamCityBuild" DependsOnTargets="CheckObsolete;Clean;Version;InstallSolutionLevelPackages;Build;Test"/>
  <Target Name="TeamCityPublish" DependsOnTargets="Document;Publish"/>
  
  <Target Name="CheckObsolete">
	<Error Text="Use CreateNugetPackagesDependsOn instead of CustomPublishTask to extend the Publish task" Condition="$(CustomPublishTask) != ''"/>
	<Error Text="Use PublishWebDependsOn instead of CopyAdditionalWebFilesTarget to extend the PublishWeb task" Condition="$(CopyAdditionalWebFilesTarget) != ''"/>
  </Target>
	
  <Target Name="Clean" DependsOnTargets="$(CleanDependsOn)">
    <Message Importance="high" Text="Clean"/>
    <Message Importance="high" Text="======================================================="/>
    <Message Importance="high" Text="Configuration = $(Configuration)"/>
    <Message Importance="high" Text="Version = $(AppVersion).$(BuildNumber)"/>
    <Message Importance="high" Text="DB = $(SchemaVersion)"/>
    <Message Importance="high" Text="MSBuild Path: $(MSBuildBinPath)"/>
    <Message Importance="high" Text="-------------------------------------------------------"/>
    <Message Importance="high" Text="Uses Help" Condition = "Exists('$(HelpProject)')"/>
    <Message Importance="high" Text="Uses Nuget" Condition = "@(NugetItem) != ''"/>
    <Message Importance="high" Text="GenerateDocs = $(GenerateDocs)"/>
    <Message Importance="high" Text="PublishWebHelp = $(PublishWebHelp)"/>
    <Message Importance="high" Text="PublicWebHelpDir = $(PublicWebHelpDir)"/>
    <Message Importance="high" Text="PublishNugetPackages = $(PublishNugetPackages)"/>
	<Message Importance="high" Text="Publish Web = $(WebProjectDir)" Condition = "$(WebProjectDir) != ''"/>
    <Message Importance="high" Text="======================================================="/>
    <RemoveDir Directories="$(OutputDir)" ContinueOnError="true"/>
    <MakeDir Directories="$(OutputDir)"/>
    <MakeDir Directories="$(BinDir)"/>
    <MakeDir Directories="$(DistributionDir)"/>
    <MakeDir Directories="$(HelpDir)"/>
    <MakeDir Directories="$(TestOutputDir)"/>
    <MakeDir Directories="$(NuGetPackageDir)" Condition="@(NugetItem) != ''"/>
	<MakeDir Directories="$(WebDir)" Condition="$(WebProjectDir) != ''"/>
  </Target>
  
  <Target Name="TransformConfigs" Condition="@(ConfigItem) != ''" Outputs="%(ConfigItem.Identity)">
    <Message Importance="high" Text="TransformConfigs"/>
	<Message Importance="high" Text="Transforming %(ConfigItem.ConfigFile) using %(ConfigItem.ConfigXslt)"/>
	<Message Importance="high" Text="======================================================="/>
    <XslTransformation XmlInputPaths="%(ConfigItem.ConfigFile)" XslInputPath="%(ConfigItem.ConfigXslt)" OutputPaths="temp.config_output" />
    <Copy SourceFiles="temp.config_output" DestinationFiles="%(ConfigItem.ConfigFile)" />
  </Target>

  <Target Name="Version">
    <Message Importance="high" Text="Version"/>
    <Time>
      <Output TaskParameter="Year" PropertyName="Year"/>
    </Time>
    <AssemblyInfo OutputFile="$(MSBuildProjectDirectory)\common\CommonAssemblyInfo.cs" CodeLanguage="C#"
            ComVisible="false" AssemblyCulture=""
            AssemblyVersion="$(AppVersion)"
            AssemblyFileVersion="$(AppVersion).$(BuildNumber)"
            AssemblyCopyright="Copyright (C) $(CompanyName) $(Year)"
            AssemblyConfiguration="$(Configuration)"
            AssemblyCompany="$(CompanyName)"
            AssemblyProduct="$(ProductDescription) ($(Configuration) DB: $(SchemaVersion))"/>

    <FileUpdate Files="$(MSBuildProjectDirectory)\common\CommonAssemblyInfo.cs"
                Regex="Version:(\d+)\.(\d+)\.(\d+)\.(\d+)"
                ReplacementText="Version:$1.$2" />

    <CallTarget Targets="VersionHelp"/>
  </Target>

  <Target Name="VersionHelp" Condition="Exists('$(HelpProject)')">
    <Message Importance="high" Text="VersionHelp: $(HelpProject)"/>
    <XmlUpdate XmlFileName="$(HelpProject)"
               Namespace="http://schemas.microsoft.com/developer/msbuild/2003"
               Prefix="n"
               XPath="//n:HelpTitle"
               Value="$(HelpTitle) $(AppVersion).$(BuildNumber)"/>
  </Target>

  <Target Name="Build">
    <Message Importance="high" Text="Build"/>
    <Time>
      <Output TaskParameter="Ticks" PropertyName="StartTick"/>
    </Time>
     <MSBuild Projects="@(ProjectToBuild)"
         Targets="Rebuild"
         Properties="Configuration=$(Configuration);Platform=Any CPU"/>
    <Time>
      <Output TaskParameter="Ticks" PropertyName="EndTick"/>
    </Time>
    <Math.Subtract Numbers="$(EndTick);$(StartTick)">
      <Output TaskParameter="Result" PropertyName="ElapsedTicks" />
    </Math.Subtract>
    <Math.Divide Numbers="$(ElapsedTicks);10000000.0">
      <Output TaskParameter="Result" PropertyName="ElapsedSeconds" />
    </Math.Divide>


    <Message Importance="high" Text="Compile Seconds: $(ElapsedSeconds)"/>
  </Target>

  <!-- Due to issues with Nuget, the runner package must be added at the solution level and 
       then the reference must be manually copied into the package.config of one of the projects so that it is
	   always pulled down during a build.  Ronaele has it in Roanele.Web.UI.Tests-->
  <Target Name="Test" Condition="@(DllsToTest) != ''">
    <Message Importance="high" Text="Test"/>
	<CallTarget Targets="CheckTestDllsExist"/>
    <XmlRead XPath="//package[@id='NUnit.Runners']/@version"
             XmlFileName=".nuget\packages.config">
      <Output TaskParameter="Value" PropertyName="NUnitVersion"/>
    </XmlRead>
	
	<Message Importance="high" Text="NUnit: $(PackageDir)\Nunit.Runners.$(NUnitVersion)\tools\nunit-console.exe"/>
	
	<PropertyGroup>
	  <DllList>@(DllsToTest, ' ')</DllList>
	</PropertyGroup>
	<Message Importance="high" Text="Dlls To Test: $(DllList)"/>
	
	<Exec WorkingDirectory="$(MSBuildProjectDirectory)" Command='$(PackageDir)\Nunit.Runners.$(NUnitVersion)\tools\nunit-console.exe $(DllList) /noshadow /result="$(TestOutputDir)\results.nunit.xml"' ContinueOnError="true">
		<Output TaskParameter="exitcode" ItemName="exitcodes"/>
	</Exec>
	<Message Importance="High" Text="##teamcity[importData type='nunit' path='$(TestOutputDir)\results.nunit.xml']"/>
	<Error Text="Tests failed" Condition="%(exitcodes.identity) > 0"/>
	
  </Target>
  
  <Target Name="CheckTestDllsExist" Outputs="%(DllsToTest.Identity)">
    <Error Text="Test dll  %(DllsToTest.Identity) does not exist" Condition="!Exists(%(DllsToTest.Identity))"/>
  </Target>

  <Target Name="Document" Condition="$(GenerateDocs)">
    <Message Importance="high" Text="Document"/>
    <MSBuild Projects="$(HelpProject)" Properties="Configuration=$(Configuration);Platform=AnyCPU"/>
    <XmlMassUpdate ContentFile="$(HelpDir)\Web.config"
               NamespaceDefinitions="msb=http://schemas.microsoft.com/developer/msbuild/2003"
               ContentRoot="configuration"
               SubstitutionsFile="$(ToolsDir)\MSBuild\BuildSupport\Onpoint.targets.properties"
               SubstitutionsRoot="/msb:Project/msb:ProjectExtensions/msb:helpWebConfigContent" />
  </Target>

  <Target Name="Publish">
    <Message Importance="high" Text="Publish"/>
    
    <CallTarget Targets="PublishBin"/>
    <CallTarget Targets="PublishHelp"/>
	<CallTarget Targets="PublishWeb"/>
    <CallTarget Targets="$(CustomPublishTask)" Condition="$(CustomPublishTask) != ''"/>
    <CallTarget Targets="CreateNugetPackages"/>
    <CallTarget Targets="PublishNugetPackages"/>
  </Target>

  <Target Name="PublishBin" Condition="$(BinInclude) != ''">
    <Message Importance="high" Text="PublishBin"/>

    <CreateItem Include="$(BinInclude)" Exclude="$(BinExclude)">
      <Output TaskParameter="Include" ItemName="BinFiles"/>
    </CreateItem>
    
    <Copy SourceFiles="@(BinFiles)" DestinationFolder="$(BinDir)"/>

    <ItemGroup>
      <ZipFiles Include="$(BinDir)\**\*.*"/>
    </ItemGroup>
    <PropertyGroup>
      <ZipFileName>$(DistributionDir)\$(ProductName)$(ZipQualifier)</ZipFileName>
    </PropertyGroup>
    <Zip Files="@(ZipFiles)" WorkingDirectory="$(BinDir)" ZipFileName="$(ZipFileName)"/>
  </Target>

  <Target Name="PublishHelp" Condition="$(GenerateDocs) and $(PublishWebHelp)">
    <Message Importance="high" Text="PublishHelp"/>
    <ItemGroup>
      <HelpFiles Include="$(HelpDir)\**\*.*"/>
    </ItemGroup>
    <RemoveDir Directories="$(PublicWebHelpDir)" ContinueOnError="true"/>
    <Copy SourceFiles="@(HelpFiles)" DestinationFolder="$(PublicWebHelpDir)\%(RecursiveDir)"/>
  </Target>
  
  <Target Name="PublishWeb" Condition="@(WebProject) != ''" DependsOnTargets="$(PublishWebDependsOn)" Outputs="%(WebProject.Identity)">
	<Message Importance="high" Text="PublishWeb - %(WebProject.WebProjectName)"/>
	<ItemGroup>
	  <WebFiles Include="%(WebProject.WebProjectDir)\**\*.*"
	            Exclude="%(WebProject.WebProjectDir)\**\*.cs;
				         %(WebProject.WebProjectDir)\**\*.csproj;
						 %(WebProject.WebProjectDir)\**\*.csproj.user;
						 %(WebProject.WebProjectDir)\obj\**\*.*;
						 %(WebProject.WebProjectDir)\Web.*.config;
						 %(WebProject.WebProjectDir)\NHibernate.*.config;
						 %(WebProject.WebProjectDir)\packages.config"/>
	</ItemGroup>
      	
	<PropertyGroup>
      <WebLocation>$(WebDir)\%(WebProject.WebProjectName)</WebLocation>
    </PropertyGroup>
		
    <Copy SourceFiles="@(WebFiles)" DestinationFolder="$(WebLocation)\%(RecursiveDir)"/>
		
	<ItemGroup>
      <ZipWebFiles Include="$(WebDir)\%(WebProject.WebProjectName)\**\*.*"/>
    </ItemGroup>
	
	<PropertyGroup>
      <ZipWebFileName>$(DistributionDir)\%(WebProject.WebProjectName)_Web$(ZipQualifier)</ZipWebFileName>
    </PropertyGroup>
    
	<Zip Files="@(ZipWebFiles)" WorkingDirectory="$(WebDir)\%(WebProject.WebProjectName)" ZipFileName="$(ZipWebFileName)"/>	
	
  </Target>
  
  <Target Name="CreateNugetPackages" Condition="@(NugetItem) != ''" DependsOnTargets="$(CreateNugetPackagesDependsOn)">
    <Message Importance="high" Text="CreateNugetPackages"/>
    <CallTarget Targets="CreateNugetPackage"/>
  </Target>

  <Target Name="CreateNugetPackage" Outputs="%(NugetItem.Identity)" Condition="@(NugetItem) != ''">
    <Message Importance="high" Text="CreateNugetPackage"/>
	
	<PropertyGroup>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) != ''">%(NugetItem.OverrideVersion)</PackageVersion>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) == '' AND $(SemanticVersion) == ''">$(AppVersion).$(BuildNumber)</PackageVersion>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) == '' AND $(SemanticVersion) != ''">$(AppVersion).$(BuildNumber)-$(SemanticVersion)</PackageVersion>
	</PropertyGroup>
	
	<Message Importance="high" Text="Version for %(NugetItem.Identity) is $(PackageVersion)"/>
	
    <XmlUpdate XmlFileName="nuspec\%(NugetItem.Identity).nuspec"
               Namespace="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"
               Prefix="n"
               XPath="//n:version"
               Value="$(PackageVersion)"/>

    <Exec WorkingDirectory="$(NuGetPackageDir)" Command="$(NuGet) pack $(MSBuildProjectDirectory)\nuspec\%(NugetItem.Identity).nuspec"/>
  </Target>

  <!-- For this to work, you must set the api key in the root dir of your project using nuget setapikey logged on as the user that will do the building -->
  <Target Name="PublishNugetPackages" Condition="$(PublishNugetPackages)">
    <Message Importance="high" Text="PublishNugetPackages"/>
    <CallTarget Targets="PublishNugetPackage"/>
  </Target>
  
  <Target Name="PublishNugetPackage" Outputs="%(NugetItem.Identity)" Condition="$(PublishNugetPackages)">
	<Message Importance="high" Text="Publish package %(NugetItem.NugetPackageId)"/>
	
	<PropertyGroup>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) != ''">%(NugetItem.OverrideVersion)</PackageVersion>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) == '' AND $(SemanticVersion) == ''">$(AppVersion).$(BuildNumber)</PackageVersion>
		<PackageVersion Condition="%(NugetItem.OverrideVersion) == '' AND $(SemanticVersion) != ''">$(AppVersion).$(BuildNumber)-$(SemanticVersion)</PackageVersion>
	</PropertyGroup>
	
    <Exec WorkingDirectory="$(MSBuildProjectDirectory)" Command="$(NuGet) push $(NugetPackageDir)\%(NugetItem.NugetPackageId).$(PackageVersion).nupkg"/>
  </Target>

  <Target Name="InstallSolutionLevelPackages">
    <Message Importance="high" Text="Install solution level packages"/>
    <Exec WorkingDirectory="$(MSBuildProjectDirectory)\.nuget" Command="nuget install -o $(MSBuildProjectDirectory)\packages"/>
  </Target>
</Project>
